#scripta-unica
2024-02-12

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍 Tags

Configurable marker, but I like # because social media has conditioned us to use that.

#tag
#nested/tag

Tags can be given a special meaning by tools. For example, #projects can be used to group
information that belongs to a specific project together. This way everything under #project/name
can be used to generate a status report with dates and tasks. For example:

:: Trying to learn how to make buns
#projects/hotdog-buns 2020-01-01 

Watched youtube video at [[url/meh]]

:: First mistake
#projects/hotdog-buns
2020-02-13

Used too much water. Couldn't even knead the dough. This is dumb.

:: I'll give it another shot
#projects/hotdog-buns 2020-06-01

Used same recipe as in [[First mistake]] but measured water by weight instead of volume. Dough was
nice this time and I could knead it. The color was a bit pale, but they tasted nice and texture was
OK. Maybe I should do an egg wash next time.

[[AUTOGENERATED TIMELINE]]
Use the three entries to generate a good looking view of the project
SOME UNICODE TIMELINE DIAGRAM
OR SOME GOOD LOOKING D3JS-generated image

At the very least this information should let us get a report like the
following:

2020-01-01 Trying to learn how to make buns
2020-02-13 First mistake
2020-06-01 I'll give it another shot

Or a clickable one if one wishes to maintain indices for later reference:

2020-01-01 [[Trying to learn how to make buns]]
2020-02-13 [[First mistake]]
2020-06-01 [[I'll give it another shot]]

 Should we ommit the extension in links to files?
[[some other note]] vs [[some other note.txt]]

󰫍 Dividers

󰫍 Section markers

They can be any character or combination of characters. For example:

  :: This is a section
  󰫍  This is a section too

󰫍 Section annotation
ANNOTATION

. Immediately below section
. Annotations can be tags, dates, or to do entries

  Do we want something like names as annotations so we can name tables or sections for easy
   jumping around? Like anchors?

󰫍 Inline annotations

This isn't a great idea. Specially since people might want to format section titles to have
dividers, e.g.

==[ This is a section ]========================================================

In this case, inline annotations would make no sense.

  It's probably better to generalize annotations so they can be anywhere in the document. Or so
   they all use the same mechanism as todos.

Before section marker but on the same line. Interpreted the same way as annotation below the
section marker

#project/meh  󰫍 Inline section annotation
  2024-02-13 󰫍 Inline section annotation
2024-02-13    󰫍 Inline section annotation
SECTION_NAME  󰫍 Inline section annotation

󰫍 Document annotation

Lines at the top of the document before section marker or whitespace?

Document annotations affect the entire document. For example, if a document is marked with the tag
#myproject then all todos inside that document would be interpreted as having the tag #myproject
when filtering.

󰫍 Quotation block

Goals:
. Easy to copy paste quotation without having to remove markers

󰝗
   Glyph
󰝗

"
   Quotes
"

󰫍 Code blocks

󰫍 Outlining

Outlining could be the general case for quotes, code blocks, tables, titles, etc. It can be a
generic feature. 

It's important that outlining is a reversible operation. So adding an outline can be reverted to
make editing easier without the outline, then reapplying it for final formatting.

This way a quotation block could be outlined with just a beginning and end marker.

    "
       Quotes
    "

Or it could be completely outlined using unicode box drawings.
    ┌──────────────────────────────────────┐
    │                                      │
    │                                      │
    │                Quote                 │
    │                                      │
    │                                      │
    └──────────────────────────────────────┘

Outlines are just helpers. Like in excel, they can be left, top, right, bottom, or any combination
of them.

For example a "left outline using character >" could be used for quotes as well

    > This is a quote
    > a very long quote
    > it continues

󰫍 Indentation

Indentation will be challenging. We want to keep indentation when adding or removing outlining.

󰫍 Columns

Perhaps use 50 columns for smaller mobile devices if the intention is to read from it most of the
time. In our case it's important to distinguish between the screen used for editing where 100
columns are cheap and the one used for reading.

Use 100 columns as default assuming both editing and reading will happen on a larger screen and not
a small mobile device.

󰫍 Lists

Might be good to have a List helper so you don't have to redo the list numbering every time you add
something in the middle.

For example, the helper could try and determine the correct sequence. We would only offer this for
consecutive lists in simple cases.

1. Item one
2. Item two
2. Item two
3. Item three

1. Item one
2. Item two
3. Item two
4. Item three

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍 Dates

Dates only have special meaning as section annotations and in todos. For example

:: Section
1970-01-01

[ ] 1990-01-01 My task

Something happened on this date
1970-01-01

Something happened during this period
1970-01-01 - 1990-01-01

󰫍 Date formats

2024-02-28  Full date. Only format. Don't care about the others for now

󰫍 Period shorthands:

2024H1      Year halves H1 and H2 only.
2024Q1      Quarters Q1-Q4.
2024W07     Weeks

 How is the first week of the year determined?

󰫍 Filtering dates

All filters are beginning and end inclusive.

1970-01-01

    Matches exactly 1970-01-01 and any ranges that includes this date, e.g. 1970Q1, 1970H1,
    1970W01.

1970-01-01 - 1970-01-15

    Matches individual dates in this range and any range partially contained.

    1970-01-03 - 1970-01-08 will match
    1970-01-10 - 1970-01-30 will also match

Period shorthands are expanded and behave the same way as the other ranges

    1970Q1 is expanded to 1970-01-01 - 1970-03-31
    1970H2 is expanded to 1970-07-01 - 1970-12-31

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍 Todos

Todo entries have a configurable marker, like  , but can be changed or can be a sequence like [ ].

  DATE ADDED
  DATE ADDED -DATE COMPLETED
  DATE ADDED -DATE COMPLETED !DEADLINE
  DATE ADDED !DEADLINE
  !DEADLINE
  -DATE COMPLETED

󰫍 Todo states

Markers can be customized. They shouldn't be the same. Any character or combination of characters
can be used.

[ ] This is a task ready to be tackled
[x] This is a completed task
[!] This is an important task
[-] This is a task that cannot be started yet

  This is a task ready to be tackled
  This is a completed task
  This is an important task
󰥔  This is a task that cannot be started yet

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍  Tables

Convert from CSV to unicode box lines and back? Hopefully it can be converted back and forth
without losing information

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍  Links

For text documents, we can link to specific lines using [[text_doc:12]] where 12 is the line number
in file text_doc.

Local files can be referenced by their name without extension or containing directory, for example
[[Coffee recipe]] would match "attachments/Coffee recipe.pdf", "entries/Coffee recipe.txt",
"nested/directory/Coffee recipe.mp4".

If there are name collisions during navigation, then tools should offer all collisions and show
enough information to disambiguate, e.g. in the previous example following the link [[Coffee
recipe]] should let the user select one of the options:
    . attachments/Coffee recipe.pdf
    . entries/Coffee recipe.txt
    . nested/directory/Coffee recipe.mp4

  How to link to a section inside a document?
[[path/to/document#SECTION_NAME]] it has to be unique enough that other URLs/URIs don't clash. I
probably need to reed some RFCs for URIs and URLs.

Everything that can be linked is between markers like [[LINK]]. No difference between [[URI]],
[[path/to/something.pdf]], [[/absolute/path/to/file.mp3]], [[URL://mime-type]].

Tools will do their best to embed any linked resource inline. The absolute minimum is to be able to
follow the link using the OS default application for the identifier. 

One big goal of this is to be able to archive representations of the linked resources because of
bit rot and fucking DRM or stock cucks. Try to write tools that save a version of the linked file
on first access or maybe on demand and store them in a local cache that can be used instead. This
means that this documentation relies on having that resource manager, but if the resource manager
breaks or people don't want to use it, they can still just follow the original link and if that
breaks it's not our problem.

  Does this mean the resource manager will download youtube videos?
-  That would be nice

  Spotify songs?
-  Would be awesome

  What if the link points to some specialty software file like a Garage Band
   file?
-  Integrations could rely on plugins and fallback to just trying to open them using the OS if all
   else fails.

───────────────────────────────────────────────────────────────────────────────────────────────────
󰫍  Autocomplete

󰫍  Language Server Protocol

Perhaps a good way to make this portable is to offer an indexer and an API. A sort of Language
Server offered over the Language Server Protocol. That way, different editors could leverage the
same LSP.

Some goals for the LSP:
. Index tags
. Index section names
. Index file names and types
. Index date entries
. Index todos by state

This should enable:
. Tag autocompletion
. Link autocompletion
. Link disambiguation
. Filter by date
. Filter by todo state
. Section link autocompletion
. Filter by tag
. Filter by directory

󰫍  Shell integration

󰫍  Syntax highlighting

Highlight sections, dividers, outlines, dates, todos, and links. Everything else is plain or
customizable by the user.

󰫍  Vim integration

Define markers for customizable things and autogenerate syntax and plugin configuration files

󰫍  General editor integration

